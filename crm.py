# %% [markdown]
# **class FetchGoogleSheet:**
# * takes 3 arguments 
# * sheet_path (google sheet that is published on the web)
# * monday_api_token (monday crm api token key)
# * board_id (monday crm board)
# 
# **function mileage:**
# * checks if column `Mileage` is < 130000
# * if its true, add it to the dataframe
# 
# **function vauto:**
# * checks if column `95` is <= 'Reserve Price'
# * if its true, add it to the dataframe
# 
# **function carfax_amt:**
# * checks if column `Carfax Amt` < 6000
# * if its true, add it to the dataframe
# 
# **function tags:**
# * checks if column `Tags` contains any of ('engine needs repair','tow','transmission')
# * also it handles NaN values in column `Tags`
# * if its true, do not add them to the dataframe
# 


# %%
import pandas as pd
from monday import MondayClient

class FetchGoogleSheet:
    def __init__(self, url):
        self.df = pd.read_csv(url)

    def mileage(self):
        mileage_condition = self.df["Mileage"] < 130000
        self.df = self.df[mileage_condition]

    def vauto(self):
        vauto_condition = self.df["95"] >= self.df["Reserve Price"]
        self.df = self.df[vauto_condition]

    def carfax_amt(self):
        carfax_amt_condition = self.df["Carfax Amt"] < 6000
        self.df = self.df[carfax_amt_condition]

    def tags(self):
        tags_condition_1 = self.df["Tags"] == "engine needs repair"
        tags_condition_2 = self.df["Tags"] == "tow"
        tags_condition_3 = self.df["Tags"] == "transmission"
        # Fill NaN values with False
        tags_condition_1 = tags_condition_1.fillna(False)
        tags_condition_2 = tags_condition_2.fillna(False)
        tags_condition_3 = tags_condition_3.fillna(False)
        # Apply conditions
        self.df = self.df[~(tags_condition_1 | tags_condition_2 | tags_condition_3)]

if __name__ == "__main__":
    sheet_path = "https://docs.google.com/spreadsheets/d/e/2PACX-1vR8P8FWB28g0TMqz1TYyFirTokpbumL_AfEi4lVJNIf3M91HGfo9E2tmMIQMzNJ2Ad4sTqipiCLbkjD/pub?output=csv"
    obj = FetchGoogleSheet(sheet_path)
    # obj.mileage()
    # obj.vauto()
    # obj.carfax_amt()
    # obj.tags()

# %%
print(obj.df.head())

# %% [markdown]
# ## Creating columns and populating table

# %%
import requests
import json
import time
import numpy as np
import pandas as pd

api_info = {
    "apiKey": "eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjMwMDM1MjY1OCwiYWFpIjoxMSwidWlkIjo1MjcyOTI1NCwiaWFkIjoiMjAyMy0xMi0wNFQwODo1ODowMC4zMzRaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MjAxMjc5NzgsInJnbiI6ImFwc2UyIn0.DgL5guYT_5gKKc1q73R-Hjo_gRg6tPlyv2scL-vwzwo",
    "apiUrl": "https://api.monday.com/v2",
    "board_id": None,
}
headers = {"Authorization": api_info["apiKey"], "Content-Type": "application/json"}


def make_request(api_info, headers, query):
    """
    This function take api_info {a python dictionary containing apikey, apiurl,borad id},
    headers (authentication information) and
    query (GraphQL query).
    Makes post request and returns the response in json format
    """
    data = {"query": query}
    res = requests.post(url=api_info["apiUrl"], json=data, headers=headers)
    return res.json()

# %%
def create_column():
    """
    This function creates columns on the monday board group 
    with column names same as in the google sheet
    """
    columns = obj.df.columns
    for column in columns:
        column_type = "text"

        query = f"""
                    mutation {{
            create_column(board_id: {api_info['board_id']}, title:"{column}", 
            column_type: {column_type}
            ) {{
                id
            }}
            }}    
                """
        time.sleep(2)
        res = make_request(api_info, headers, query)
        print(res)

# %%
def get_ids():
    """
    This function gets all the column ids
    """
    query = f'''query {{
              boards (ids: {api_info['board_id']}) {{
                columns {{
                  title
                  id
                }}
              }}
            }}'''
    time.sleep(2)
    res = make_request(api_info,headers,query)
    return res

# %%
def create_mapping(row,title_id_mapping):
    """
    This function maps column_id with corresponding row values
    column_id : value
    """
    column_values = {}
    for title,value in row.items():
        column_values[title_id_mapping[str(title)]] = str(value)
    return column_values

# %%
def get_item_name(row):
    """
    This function creates item_name for the default column in the board
    """
    return f"{row['Make']}_{row['Model']}_{row['Year']}_{row['VIN']}"

# %%
def populate_table(group_id,title_id_mapping):
    """
    This function takes group_id as argument and
    populates the board table iwith column_values generated by mapping function
    """
    for index, row in obj.df.iterrows():
        col_vals = json.dumps(create_mapping(row, title_id_mapping)).replace('"','\\"')
        query = f'''
            mutation {{
                create_item (
                    board_id: {api_info["board_id"]},
                    group_id: "{group_id}",  
                    item_name: "{get_item_name(row)}",  
                    column_values: "{col_vals}"
                ) {{
                    id
                }}
            }}
        '''
        time.sleep(2)
        res = make_request(api_info, headers, query)
        print(res)

# %%
def delete_all_columns():
    """
    This function deletes all the existing columns in the group
    to be used when the board is completely new
    """
    res = get_ids()
    column_ids = [d['id'] for d in res['data']['boards'][0]['columns'][1:]]
    for col_id in column_ids:
        query = f'''
            mutation {{
    delete_column (board_id: {api_info['board_id']}, column_id: "{col_id}") {{
        id
    }}
    }}
        '''
        time.sleep(2)
        r = make_request(api_info,headers,query)
        print(r)

# %% [markdown]
# ## Adding sub items to the table

# %%
def generate_random_name_email():
    """
    This function generates dummy full name and email
    """
    first_names = [    "Alice",    "Bob",    "Charlie",    "Diana",    "Eva",    "Frank",    "Grace",    "Harry",    "Ivy",    "Jack",    "Katherine",    "Leo",    "Mia",    "Noah",    "Olivia",    "Peter",    "Quinn",    "Rachel",    "Samuel",    "Tara",    "Ulysses",    "Violet",    "William",    "Xander",    "Yasmine"]
    last_names = [    "Anderson",    "Brown",    "Clark",    "Davis",    "Evans",    "Fisher",    "Garcia",    "Hill",    "Irwin",    "Jones",   "Keller",    "Lopez",    "Miller",    "Nguyen",    "Owens",    "Perez",    "Quinn",    "Rodriguez",    "Smith",    "Taylor",    "Upton",    "Vargas",    "Wilson",    "Xu",    "Yates"]
    fname_index = np.random.randint(0,len(first_names)-1)
    lname_index = np.random.randint(0,len(last_names)-1)
    full_name = f"{first_names[fname_index]} {last_names[lname_index]}"
    email = f"{first_names[fname_index]}.{last_names[lname_index]}@example.com".lower()
    return full_name,email,

def generate_random_number():
    """
    This function generates dummy 10 digit phone number
    """
    phone_number = []
    for i in range(10):
        phone_number.append(str(np.random.randint(1,9)))        
    return ''.join(phone_number)

def generate_random_location():
    """
    This function generates dummy city names
    """
    city_names = [    "New York",    "Los Angeles",    "Chicago",    "Houston",    "Phoenix",    "Philadelphia",    "San Antonio",    "San Diego",    "Dallas",    "San Jose",    "Austin",    "Jacksonville",    "San Francisco",    "Indianapolis",    "Columbus",    "Fort Worth",    "Charlotte",    "Seattle",    "Denver",    "El Paso",    "Detroit",    "Washington",    "Boston",    "Memphis",    "Nashville",    "Portland",    "Oklahoma City",    "Las Vegas",    "Baltimore",    "Louisville",    "Milwaukee",    "Albuquerque",    "Tucson",    "Fresno",    "Sacramento",    "Kansas City",    "Long Beach",    "Mesa",   "Atlanta",    "Colorado Springs",    "Virginia Beach",    "Raleigh",    "Omaha",    "Miami",    "Oakland",    "Minneapolis",    "Tampa",    "Tulsa"]
    return city_names[np.random.randint(0,len(city_names)-1)]

# %%
def generate_user_data():
    """
    This function generates dummy user data (full name, location, email, phone)
    """
    name,email = generate_random_name_email()
    phone = generate_random_number()
    location = generate_random_location()
    user_data = [name,location,email,phone]
    return user_data

# %%
# get ids of all items in the board
# choose any id where you want to create subitem
# create sub_item and get board_id (later used for creating columns, it will run only once)
# populate sub_item for choose parent_id (item_id)

# %%
def get_all_items_ids():
    """
    This function gets all the ids of the items (each row default cell id)
    and return response in json format
    """
    query = f'''
        query {{
            boards (ids: {api_info['board_id']}) {{
                items {{
                    id
                    name
                }}
            }}
        }}
    '''
    return make_request(api_info, headers, query)

# %%
def create_sub_item(parent_id,item_name,column_values=None,mode=0):
    """
    This function creates sub item, takes parent_id (item_id where subitem has to be made, column_values
    for the subitems, mode flag)
    column_values is None by default because the created columns may be initial column otherwise
    column_values are appropriate values
    mode flag = 1 , creating sub_item for the first time in a row
    mode flag = 0 , populating existing sub_item columns
    """
    if mode==0:
      query = f'''
      mutation {{
    create_subitem (parent_item_id:{int(parent_id)} , item_name: "{item_name}",
    column_values: "{column_values}") {{
      id
      board {{
        id
      }}
    }}
  }}
    '''
    elif mode==1:
      query = f'''
      mutation {{
    create_subitem (parent_item_id:{int(parent_id)} , item_name: "{item_name}") {{
      id
      board {{
        id
      }}
    }}
  }}
    '''
    return make_request(api_info,headers,query)

# %%
def create_sub_item_columns(columns,board_id):
    """
    This function creates sub_item columns by taking board_id (this board id is generated upon
    creating a new sub item and different from original board id)
    """
    for column in columns:
        column_type = "text"

        query = f"""
                    mutation {{
            create_column(board_id: {board_id}, title:"{column}", 
            column_type: {column_type}
            ) {{
                id
            }}
            }}    
                """
        time.sleep(2)
        res = make_request(api_info, headers, query)
        print(res)

# %%
def get_sub_item_column_id(parent_id,mode=0):
    """
    This function gets column ids of the sub_items that later used for populating sub item
    column values
    takes parent_id as argument and mode flag
    mode = 0, return response in json format
    mode = 1, return response in list( of column_ids)
    """
    query = f'''
        query {{
  items (ids: {parent_id}) {{
    subitems {{
      id
      column_values {{
        id
      }}
    }}
  }}
}}
    
    '''
    res =  make_request(api_info,headers,query)
    if mode==0:
      return res
    return [d['id'] for d in res['data']['items'][0]['subitems'][0]['column_values']]

# %%
def clean_up_sub_items(parent_id,created_subitem_id):
    """
    This function deletes default sub item columns( it is created when you create sub item for the first time
    )
    takes parent_id (item_id ) and created_subitem_id (it is board id that is generated on sub item creation)
    """
    column_ids = get_sub_item_column_id(parent_id,mode=1)
    for col_id in column_ids:
        query = f'''
            mutation {{
    delete_column (board_id: {created_subitem_id}, column_id: "{col_id}") {{
        id
    }}
    }}
        '''
        time.sleep(2)
        
        res = make_request(api_info,headers,query)
        print(res)

# %%
def delete_subitem(parent_id):
    """
    This function deletes default sub_item row i.e first row
    """
    res = get_sub_item_column_id(parent_id,mode=0)
    first_subitem_id = res['data']['items'][0]['subitems'][0]['id']
    query = f'''
            mutation {{
        delete_item (item_id: {first_subitem_id}) {{
            id
        }}
        }}
    '''
    resp = make_request(api_info,headers,query)
    print(resp)

# %%
def populate_subitems(user_data,item_id_name_map,parent_id):
    """
    This function maps sub item column id with user_data and creates sub item
    """
    sub_item_column_ids = get_sub_item_column_id(parent_id,mode=1)
    data = dict(zip(sub_item_column_ids,user_data))
    column_values = json.dumps(data).replace('"','\\"')
    item_name = item_id_name_map[parent_id]
    create_sub_item(parent_id,item_name,column_values,mode=0)

# %%
api_info['board_id'] = "board_id"
delete_all_columns() # remove default columns that is creted upon new board creation
create_column() # create desired columns

"""
Creating python dictionary of column name (title in monday api ternms)
and their respective ids.
Removing 'Name' because its default column we don't to make mapping for it
"""
title_id_mapping = {}
res = get_ids()
for dictionary in res['data']['boards'][0]['columns']:
    title = dictionary['title']
    id = dictionary['id']
    title_id_mapping[str(title)] = str(id)
title_id_mapping.pop('Name')
try:
    title_id_mapping.pop('Subitems')
except Exception as e:
    pass

populate_table("topics",title_id_mapping) #group id

# %%
row_num = 2
samples = 2
res = get_all_items_ids()
item_id_name_map = {d['id'] : d['name'] for d in res['data']['boards'][0]['items'] }
parent_id = list(item_id_name_map.keys())[row_num]
item_name = item_id_name_map[parent_id]

resp = create_sub_item(parent_id,item_name,mode=1)
# run this only one time, then comment it out
#from
# created_subitem_id = resp['data']['create_subitem']['board']['id']
# clean_up_sub_items(parent_id,created_subitem_id)
# create_sub_item_columns(['Name','Location','Email','phone'],created_subitem_id)
# to 

for _ in range(samples):
    user_data = generate_user_data()
    populate_subitems(user_data,item_id_name_map,parent_id)
    
delete_subitem(parent_id)


